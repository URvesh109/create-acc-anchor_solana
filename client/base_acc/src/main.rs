use anchor_client::solana_sdk::commitment_config::CommitmentConfig;
use anchor_client::solana_sdk::pubkey::Pubkey;
use anchor_client::solana_sdk::signature::read_keypair_file;
use anchor_client::solana_sdk::signature::{Keypair, Signer};
use anchor_client::{Client, Cluster};
use anyhow::Result;
use solana_sdk::system_program;
// The `accounts` and `instructions` modules are generated by the framework.
use base_acc::accounts as base_accounts;
use base_acc::instruction as base_instruction;
use clap::Parser;
use rand::rngs::OsRng;

#[derive(Parser, Debug)]
pub struct Opts {
    #[clap(long)]
    base_acc_pid: Pubkey,
}

// This example assumes a local validator is running with the programs
// deployed at the addresses given by the CLI args.
fn main() -> Result<()> {
    println!("Starting test...");
    let opts = Opts::parse();

    // Wallet and cluster params.
    let payer = read_keypair_file(&*shellexpand::tilde("~/.config/solana/id.json"))
        .expect("Example requires a keypair file");
    // let url = Cluster::Custom(
    //     "http://127.0.0.1:8899".to_string(),
    //     "ws://127.0.0.1:8900".to_string(),
    // );

    let url = Cluster::Custom(
        "https://api.devnet.solana.com".to_string(),
        "ws://api.devnet.solana.com".to_string(),
    );

    // Client.
    let client = Client::new_with_options(url, payer, CommitmentConfig::processed());

    // Run tests.
    base_acc(&client, opts.base_acc_pid)?;

    // Success.
    Ok(())
}

fn base_acc(client: &Client, pid: Pubkey) -> Result<()> {
    let program = client.program(pid);

    // `Create` parameters.
    let counter = Keypair::generate(&mut OsRng);
    let authority = program.payer();

    // Build and send a transaction.
    let tx = program
        .request()
        .signer(&counter)
        .accounts(base_accounts::Initialize {
            my_account: counter.pubkey(),
            user: authority,
            system_program: system_program::ID,
        })
        .args(base_instruction::Initialize { user: authority })
        .send()?;

    // assert_eq!(counter_account.authority, authority);
    // assert_eq!(counter_account.count, 0);

    println!("Basic Acc success! {}", tx);

    Ok(())
}
